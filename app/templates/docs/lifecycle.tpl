<h1>Жизненный цикл запроса</h1>
<ul>
    <li><a href="lifecycle#introduction">Вступление</a></li>
    <li><a href="lifecycle#lifecycle-overview">Обзор жизненного цикла</a>
        <ul>
            <li><a href="lifecycle#first-steps">Первые шаги</a></li>
            <li><a href="lifecycle#http-console-kernels">Ядра HTTP / консоли</a></li>
            <li><a href="lifecycle#service-providers">Поставщики услуг</a></li>
            <li><a href="lifecycle#routing">Маршрутизация</a></li>
            <li><a href="lifecycle#finishing-up">Заканчивать</a></li>
        </ul>
    </li>
    <li><a href="lifecycle#focus-on-service-providers">Сосредоточьтесь на поставщиках услуг</a></li>
</ul>
<p></p>
<h2 id="introduction"><a href="#introduction">Вступление</a></h2>
<p>При использовании любого инструмента в «реальном мире» вы чувствуете себя более уверенно, если понимаете, как этот
    инструмент работает. Разработка приложений ничем не отличается. Когда вы понимаете, как работают ваши инструменты
    разработки, вы чувствуете себя более комфортно и уверенно с ними.</p>
<p>Цель этого документа - дать вам хороший общий обзор того, как работает фреймворк Laravel. Если вы лучше познакомитесь
    с общей структурой, все станет менее "волшебным", и вы будете более уверены в создании своих приложений. Если вы не
    сразу поняли все термины, не унывайте! Просто попытайтесь получить общее представление о том, что происходит, и ваши
    знания будут расширяться по мере изучения других разделов документации.</p>
<p></p>
<h2 id="lifecycle-overview"><a href="#lifecycle-overview">Обзор жизненного цикла</a></h2>
<p></p>
<h3 id="first-steps"><a href="#first-steps">Точка входа</a></h3>
<p>Точкой входа для всех запросов к приложению Laravel является <code>public/index.php</code> файл. Все запросы
    направляются в этот файл конфигурацией вашего веб-сервера (Apache / Nginx). В <code>index.php</code> файле не так
    много кода. Скорее, это отправная точка для загрузки остальной части фреймворка.</p>
<p>В <code>index.php</code> файле загружает Composer сгенерированного определения автозагрузчика, а затем возвращает
    экземпляр приложения Laravel с <code>bootstrap/app.php</code>. Первым действием, предпринимаемым самим Laravel,
    является создание экземпляра <a href="container">контейнера</a> приложения / <a href="container">службы</a>.</p>
<p></p>
<h3 id="http-console-kernels"><a href="#http-console-kernels">HTTP / Консоль (HTTP / Console kernels)</a></h3>
<p>Затем входящий запрос отправляется либо ядру HTTP, либо ядру консоли, в зависимости от типа запроса, поступающего в
    приложение. Эти два ядра служат центральным местом, через которое проходят все запросы. А пока давайте
    сосредоточимся на ядре HTTP, которое находится в <code>app/Http/Kernel.php</code>.</p>
<p>Ядро HTTP расширяет <code>Illuminate\Foundation\Http\Kernel</code> класс, который определяет массив, <code>bootstrappers</code> который
    будет запущен перед выполнением запроса. Эти загрузчики настраивают обработку ошибок, настраивают ведение журнала,
    <a href="configuration#environment-configuration">обнаруживают среду приложения</a> и выполняют другие задачи,
    которые необходимо выполнить до фактической обработки запроса. Обычно эти классы обрабатывают внутреннюю
    конфигурацию Laravel, о которой вам не нужно беспокоиться.</p>
<p>Ядро HTTP также определяет список <a href="middleware">промежуточного программного обеспечения</a> HTTP, через
    которое должны пройти все запросы, прежде чем они будут обработаны приложением. Это промежуточное ПО обрабатывает
    чтение и запись <a href="session">сеанса HTTP</a>, определяет, находится ли приложение в режиме обслуживания, <a
            href="csrf">проверяет токен CSRF</a> и т. Д. Мы поговорим об этом позже.</p>
<p>Подпись метода для метода ядра HTTP <code>handle</code> довольно проста: он получает <code>Request</code> и возвращает
    <code>Response</code>. Думайте о ядре как о большом черном ящике, который представляет все ваше приложение. Подайте
    ему HTTP-запросы, и он вернет HTTP-ответы.</p>
<p></p>
<h3 id="service-providers"><a href="#service-providers">Поставщики услуг (Service providers)</a></h3>
<p>Одним из наиболее важных действий при загрузке ядра является загрузка <a href="providers">поставщиков услуг</a> для
    вашего приложения. Все поставщики услуг для приложения настраиваются в массиве <code>config/app.php</code> файла
    конфигурации <code>providers</code>.</p>
<p>Laravel будет перебирать этот список поставщиков и создавать экземпляры каждого из них. После создания экземпляров
    поставщиков <code>register</code> метод будет вызываться для всех поставщиков. Затем, когда все поставщики будут
    зарегистрированы, <code>boot</code> метод будет вызываться для каждого поставщика.</p>
<p>Поставщики услуг несут ответственность за загрузку всех различных компонентов инфраструктуры, таких как компоненты
    базы данных, очереди, проверки и маршрутизации. По сути, каждая основная функция, предлагаемая Laravel, загружается
    и настраивается поставщиком услуг. Поскольку они загружают и настраивают так много функций, предлагаемых
    фреймворком, поставщики услуг являются наиболее важным аспектом всего процесса начальной загрузки Laravel.</p>
<p>Вам может быть интересно, почему <code>register</code> метод каждого поставщика услуг вызывается перед вызовом <code>boot</code> метода
    для любого поставщика услуг. Ответ прост. Вызвав <code>register</code> метод каждого поставщика услуг первым,
    поставщики услуг могут зависеть от каждого контейнера связывающего регистрации и доступны к тому времени
    <code>boot</code> метод выполняется.</p>
<p></p>
<h3 id="routing"><a href="#routing">Маршрутизация (Routing)</a></h3>
<p>Одним из наиболее важных поставщиков услуг в вашем приложении является платформа <code>App\Providers\RouteServiceProvider</code>.
    Этот поставщик услуг загружает файлы маршрутов, содержащиеся в каталоге вашего приложения <code>routes</code>.
    Давайте, взломайте <code>RouteServiceProvider</code> код и посмотрите, как он работает!</p>
<p>Как только приложение будет загружено и все поставщики услуг будут зарегистрированы, <code>Request</code> он будет
    передан маршрутизатору для отправки. Маршрутизатор отправит запрос на маршрут или контроллер, а также запустит любое
    связующее ПО для конкретного маршрута.</p>
<p>Промежуточное ПО обеспечивает удобный механизм фильтрации или изучения HTTP-запросов, поступающих в ваше приложение.
    Например, Laravel включает промежуточное ПО, которое проверяет, аутентифицирован ли пользователь вашего приложения.
    Если пользователь не аутентифицирован, промежуточное ПО перенаправит пользователя на экран входа в систему. Однако,
    если пользователь аутентифицирован, промежуточное программное обеспечение позволит запросу продолжить работу в
    приложении. Некоторое промежуточное программное обеспечение назначается всем маршрутам в приложении, например, тем,
    которые определены в <code>$middleware</code> свойстве вашего ядра HTTP, тогда как некоторые назначаются только для
    определенных маршрутов или групп маршрутов. Вы можете узнать больше о промежуточном программном обеспечении,
    прочитав полную <a href="middleware">документацию по промежуточному программному обеспечению</a>.</p>
<p>Если запрос проходит через все связующее ПО, назначенное согласованному маршруту, метод маршрута или контроллера
    будет выполнен, а ответ, возвращенный методом маршрута или контроллера, будет отправлен обратно через цепочку
    промежуточного программного обеспечения маршрута.</p>
<p></p>
<h3 id="finishing-up"><a href="#finishing-up">Заключение</a></h3>
<p>Как только метод маршрута или контроллера вернет ответ, ответ отправится обратно через промежуточное программное
    обеспечение маршрута, давая приложению возможность изменить или проверить исходящий ответ.</p>
<p>Наконец, как только ответ проходит через промежуточное ПО, метод ядра HTTP <code>handle</code> возвращает объект
    ответа, а <code>index.php</code> файл вызывает <code>send</code> метод для возвращенного ответа. <code>send</code> Метод
    отправляет содержимое ответа в веб - браузере пользователя. Мы завершили наш путь через весь жизненный цикл запроса
    Laravel!</p>
<p></p>
<h2 id="focus-on-service-providers"><a href="#focus-on-service-providers">Сосредоточьтесь на поставщиках услуг</a></h2>
<p>Поставщики услуг действительно являются ключом к начальной загрузке приложения Laravel. Экземпляр приложения
    создается, поставщики услуг регистрируются, и запрос передается загружаемому приложению. Это действительно так
    просто!</p>
<p>Очень важно иметь четкое представление о том, как создается и загружается приложение Laravel через поставщиков услуг.
    Поставщики услуг по умолчанию для вашего приложения хранятся в <code>app/Providers</code> каталоге.</p>
<p>По умолчанию <code>AppServiceProvider</code> довольно пусто. Этот провайдер - отличное место для добавления
    собственных привязок начальной загрузки вашего приложения и контейнеров служб. Для больших приложений вы можете
    захотеть создать несколько поставщиков услуг, каждый с более детальной загрузкой для определенных сервисов,
    используемых вашим приложением.</p> 
